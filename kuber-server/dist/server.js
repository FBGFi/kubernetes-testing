(()=>{"use strict";var e={607:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=o(s(860)),i=o(s(582)),n=o(s(231)),a=o(s(557));o(s(142)).default.config();const c=(0,r.default)(),l=process.env.PORT;c.use(r.default.json()),c.use((0,i.default)());const u=e=>{n.default.writeFile("./.log",e,{flag:"a+"},(e=>{e&&console.error(e)}))},h=(e=>{const t=["a","b","c","d","!","?","1","2","3"];let s,o="";for(let e=0;e<30;e++)s=Math.ceil(Math.random()*t.length)-1,o+=t[s];return o})();c.get("/",((e,t)=>{console.log({NAME:process.env.NAME,TITLE:process.env.TITLE,PASSWORD:process.env.password}),u("Requested from "+h+"\n\n"),t.json({status:200,data:{id:h,env:process.env}})})),c.get("/test",((e,t)=>{t.json({})})),c.get("/api",((e,t)=>{const s=new a.default;try{s.callApi((e=>t.json(e)))}catch(e){console.log("ERROR THERE"),console.error(e),t.json({status:500,message:"Internal server error"})}})),c.get("/logs",((e,t)=>{n.default.readFile("./.log","utf8",((e,s)=>{e?(console.error(e),t.json({status:400})):t.json({status:200,address:""})}))})),c.get("/roominfo/:roomName",((e,t)=>{t.json({status:200,address:""})})),c.listen(l,(()=>{const e=`\t${(new Date).toLocaleString()}\n[server]: Server started on port: ${l}\n\n`;console.log(e),u(e)}))},709:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this._serviceAccountPath="/var/run/secrets/kubernetes.io/serviceaccount",this._certFileName="ca.crt",this._tokenName="token",this._protocol="https",this._apiEndpoint="kubernetes.default.svc/api",this._apiVersion="v1",this.getCertPath=()=>`${this.serviceAccountPath}/${this.certFileName}`,this.getTokenPath=()=>`${this.serviceAccountPath}/${this.tokenName}`,this.getApiRoute=()=>`${this.protocol}://${this.apiEndpoint}/${this.apiVersion}`}get apiVersion(){return this._apiVersion}set apiVersion(e){this._apiVersion=e}get serviceAccountPath(){return this._serviceAccountPath}set serviceAccountPath(e){this._serviceAccountPath=e}get certFileName(){return this._certFileName}set certFileName(e){this._certFileName=e}get tokenName(){return this._tokenName}set tokenName(e){this._tokenName=e}get protocol(){return this._protocol}set protocol(e){this._protocol=e}get apiEndpoint(){return this._apiEndpoint}set apiEndpoint(e){this._apiEndpoint=e}}},557:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=o(s(709)),i=o(s(617)),n=o(s(167)),a=o(s(231));class c extends r.default{constructor(){super(...arguments),this.getCertFile=()=>a.default.readFileSync(this.getCertPath()),this.getTokenFile=()=>a.default.readFileSync(this.getTokenPath())}fileReaderCallback(e,t){if(!e)return t;console.error(e)}getAxiosConfig(){return{httpsAgent:new i.default.Agent({ca:this.getCertFile(),keepAlive:!1}),headers:{Authorization:`Bearer ${this.getTokenFile()}`}}}callApi(e){n.default.get(this.getApiRoute(),this.getAxiosConfig()).then((t=>{e(t.data)})).catch((e=>{console.log("ERROR HERE"),console.error(e)}))}}t.default=c},167:e=>{e.exports=require("axios")},582:e=>{e.exports=require("cors")},142:e=>{e.exports=require("dotenv")},860:e=>{e.exports=require("express")},231:e=>{e.exports=require("fs")},617:e=>{e.exports=require("https")}},t={};!function s(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,s),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,